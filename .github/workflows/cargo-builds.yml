name: GitHub Actions Demo
on: [push]

jobs:
  create-gh-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

  build-and-release:
    name: Build and Release
    needs: create-gh-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-2019
            bin_name: git-remote-gosh-windows-amd64
          - os: ubuntu-20.04
            bin_name: git-remote-gosh-linux-amd64
          - os: macos-12
            bin_name: git-remote-gosh-darwin-amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.66.0
          override: true
      - name: run if Ubuntu only
        if: startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt install -y protobuf-compiler
      - name: run if MacOS only
        if: startsWith(matrix.os,'macos')
        run: |
          brew install protobuf
      - name: run if Windows only
        if: startsWith(matrix.os,'windows')
        run: |
          choco install protoc
      - name: Prepare ABIs
        working-directory: git-remote-gosh
        run: |
          mkdir -p ./resources
          cp ../contracts/gosh/*.abi.json ./resources/
      - name: Build project
        working-directory: git-remote-gosh
        run: |
          cargo build --release
      - name: Upload Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-gh-release.outputs.upload_url }}
          asset_path: ./git-remote-gosh/bin/git-remote-gosh
          asset_name: ${{ matrix.bin_name }}
          asset_content_type: application/octet-stream
