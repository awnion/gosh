name: Release

on: workflow_dispatch

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: full
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_LTO: true

jobs:
  build:
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: true
      matrix:
        include:
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   name: git-remote-gosh-darwin-arm64
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   name: git-remote-gosh-darwin-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: git-remote-gosh-linux-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: git-remote-gosh-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: git-remote-gosh-windows-amd64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Cache
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: "${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: "${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Build
        shell: bash
        env:
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
          CC_x86_64_unknown_linux_gnu: x86_64-linux-gnu-gcc
          CXX_x86_64_unknown_linux_gnu: x86_64-linux-gnu-g++
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
          ## why?
          # BINDGEN_EXTRA_CLANG_ARGS": '--sysroot /usr/arm-linux-gnueabi'
          CARGO_BUILD_TARGET: ${{ github.workspace }}/target
        run: |
          set -xe

          mkdir -p ${{ matrix.name }}
          tee <<EOF ${{ matrix.name }}/dispatcher.ini
          git-remote-gosh_v1_0_0
          git-remote-gosh_v2_0_0
          git-remote-gosh_v3_0_0
          git-remote-gosh_v4_0_0
          git-remote-gosh_v5_0_0
          git-remote-gosh_v5_1_0
          git-remote-gosh_v6_0_0
          git-remote-gosh_v6_1_0
          EOF

          cd '${{ github.workspace }}/gosh-dispatcher'
          cargo build --release --target=${{ matrix.target }}

          cd '${{ github.workspace }}/v6_x/v6.0.0/git-remote-gosh'
          make copy_abi
          cargo build --release --target=${{ matrix.target }}

          cd '${{ github.workspace }}/v6_x/v6.1.0/git-remote-gosh'
          make copy_abi
          cargo build --release --target=${{ matrix.target }}

          mv '${{ github.workspace }}/target/${{ matrix.target }}/release/git-remote-gosh'* '${{ github.workspace }}/${{ matrix.name }}/'

          ls -lA '${{ github.workspace }}/${{ matrix.name }}'
          cd '${{ github.workspace }}'
          tar -czvf '${{ matrix.name }}.tar.gz' -C '${{ matrix.name }}' .

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            ${{ matrix.name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
