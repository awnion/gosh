name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: full
  ## warnings -> errors
  # RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
  CC_x86_64_unknown_linux_gnu: x86_64-linux-gnu-gcc
  CXX_x86_64_unknown_linux_gnu: x86_64-linux-gnu-g++
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
  CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
  ## TODO: why?
  # BINDGEN_EXTRA_CLANG_ARGS": '--sysroot /usr/arm-linux-gnueabi'

jobs:
  build:
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: true
      matrix:
        name:
          # - git-remote-gosh-darwin-arm64
          # - git-remote-gosh-darwin-amd64
          # - git-remote-gosh-linux-arm64
          - git-remote-gosh-linux-amd64
        bin:
          - git-remote-gosh
          - git-remote-gosh_v1_0_0
          - git-remote-gosh_v2_0_0
        include:
          ## bin
          - bin: git-remote-gosh
            dir: gosh-dispatcher
          - bin: git-remote-gosh_v1_0_0
            dir: v1_x/git-remote-gosh
            copy_abi: true
          - bin: git-remote-gosh_v2_0_0
            dir: v2_x/git-remote-gosh
            copy_abi: true

          ## name
          # - name: git-remote-gosh-darwin-arm64
          #   os: macos-latest
          #   target: aarch64-apple-darwin
          # - name: git-remote-gosh-darwin-amd64
          #   os: macos-latest
          #   target: x86_64-apple-darwin
          - name: git-remote-gosh-linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - name: git-remote-gosh-linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - name: git-remote-gosh-windows-amd64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Cache
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: "${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: "${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: ${{ matrix.dir }}/target
          key: ${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Add cross compile Linux tools
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        shell: bash
        run: |
          apt update -y
          apt install -y build-essential g++-x86-64-linux-gnu libc6-dev-amd64-cross g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Copy ABI
        if: ${{ matrix.copy_abi }}
        working-directory: ${{ matrix.dir }}
        run: make copy_abi

      - name: Build Binary ${{ matrix.name }}
        working-directory: ${{ matrix.dir }}
        run: |
          cargo build --release --target=${{ matrix.target }}

      - name: Artifact ${{ matrix.name }}
        working-directory: ${{ matrix.dir }}
        run: |
          cargo build --release --target=${{ matrix.target }}

      - uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.dir}}/target/${{ matrix.target }}/release/${{ matrix.name }}
          name: ${{ matrix.name }}--${{ matrix.bin }}

  release:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
          # - git-remote-gosh-darwin-arm64
          # - git-remote-gosh-darwin-amd64
          # - git-remote-gosh-linux-arm64
          - git-remote-gosh-linux-amd64

    steps:
      - name: Make dir
        run: |
          mkdir -p ${{ matrix.name }}
            - git-remote-gosh
            - git-remote-gosh_v1_0_0
            - git-remote-gosh_v2_0_0

      - name: Download git-remote-gosh
        uses: actions/download-artifact@v3
        with:
          path: ${{ matrix.name }}/git-remote-gosh
          name: ${{ matrix.name }}--git-remote-gosh

      - name: Download git-remote-gosh_v1_0_0
        uses: actions/download-artifact@v3
        with:
          path: ${{ matrix.name }}/git-remote-gosh_v1_0_0
          name: ${{ matrix.name }}--git-remote-gosh_v1_0_0

      - name: Download git-remote-gosh_v2_0_0
        uses: actions/download-artifact@v3
        with:
          path: ${{ matrix.name }}/git-remote-gosh_v2_0_0
          name: ${{ matrix.name }}--git-remote-gosh_v2_0_0

      - name: Make archive
        run: |
          chmod +x ${{ matrix.name }}/*
          tee <<EOF '${{ matrix.name }}/dispatcher.ini'
          git-remote-gosh_v1_0_0
          git-remote-gosh_v2_0_0
          git-remote-gosh_v3_0_0
          git-remote-gosh_v4_0_0
          git-remote-gosh_v5_0_0
          git-remote-gosh_v5_1_0
          git-remote-gosh_v6_0_0
          git-remote-gosh_v6_1_0
          EOF

          tar -czvf ${{ matrix.name }}.tar.gz -C ${{ matrix.name }} .

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            ${{ matrix.name }}.tar.gz
          tag_name: rc-${{ github.ref_name }}-${{ github.run_number }}

      # - uses: actions/download-artifact@v3
      #   with:
      #     path: target/${{ matrix.target }}/release/rust-openssl-windows
      #     name: ${{ matrix.name }}

      # # - name: Add cross compile Win tools
      # #   if: ${{ matrix.os == 'windows-latest' }}
      # #   shell: bash
      # #   run: |
      # #     choco install openssl

      # - name: Build dispatcher
      #   shell: bash
      #   run: |
      #     mkdir -p '${{ matrix.name }}'
      #     tee <<EOF '${{ matrix.name }}/dispatcher.ini'
      #     git-remote-gosh_v1_0_0
      #     git-remote-gosh_v2_0_0
      #     git-remote-gosh_v3_0_0
      #     git-remote-gosh_v4_0_0
      #     git-remote-gosh_v5_0_0
      #     git-remote-gosh_v5_1_0
      #     git-remote-gosh_v6_0_0
      #     git-remote-gosh_v6_1_0
      #     EOF

      #     cd gosh-dispatcher
      #     cargo build --release --target=${{ matrix.target }}
      #     mv target/${{ matrix.target }}/release/git-remote-gosh* '${{ github.workspace }}/${{ matrix.name }}'
      #     rm -rf target

      # - name: Build 6.1.0
      #   shell: bash
      #   run: |
      #     cd v6_x/v6.1.0/git-remote-gosh
      #     make copy_abi
      #     cargo build --release --target=${{ matrix.target }}
      #     mv target/${{ matrix.target }}/release/git-remote-gosh* '${{ github.workspace }}/${{ matrix.name }}'
      #     rm -rf target

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: git-remote-gosh-${{ matrix.name }}
      #     path: ${{ matrix.name }}

      # # - name: Build Archive *nix
      # #   shell: bash
      # #   if: ${{ runner.os != 'Windows'}}
      # #   run: |
      # #     ls -lA ${{ matrix.name }}
      # #     tar -czvf '${{ matrix.name }}.tar.gz' -C '${{ matrix.name }}' .

      # # - name: Build Archive Windows
      # #   shell: bash
      # #   if: ${{ runner.os == 'Windows'}}
      # #   run: |
      # #     ls -lA ${{ matrix.name }}
      # #     tar -czvf '${{ matrix.name }}.tar.gz' -C '${{ matrix.name }}' .

      # # - name: Publish
      # #   uses: softprops/action-gh-release@v1
      # #   with:
      # #     prerelease: true
      # #     files: |
      # #       ${{ matrix.name }}.tar.gz
      # #   env:
      # #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
